# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#What are the names of the artists and songs in the top ten popular songs?
SELECT artist_name
,track_name
,popularity
FROM BIT_DB.Spotifydata
WHERE popularity
ORDER BY popularity DESC
LIMIT 10;

#What are the songs with popularity higher than the average popularity?
SELECT track_name
FROM BIT_DB.Spotifydata
WHERE popularity>(SELECT AVG(popularity) FROM BIT_DB.Spotifydata)
ORDER BY popularity DESC;


#What is the distribution of songs by Popularity Range?
SELECT 
    CASE
        WHEN popularity >=90 THEN '90-100'
        WHEN popularity >=80 THEN '80-89'
        WHEN popularity >=70 THEN '70-79'
        ELSE '70 or Less'
    END AS popularity_range,
    COUNT(*) AS song_count
FROM BIT_DB.Spotifydata
GROUP BY popularity_range
ORDER BY popularity_range DESC;
